name: Django CI with Containers

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ] 
  
env: 
  SECRET_KEY: your_secret_key
  DEBUG: True
  DATABASE_URL: postgres://postgres:admin@db:5432/test_db
  DB_NAME: test_db
  DB_USER: postgres
  DB_PASSWORD: admin
  DB_HOST: localhost 
  DB_PORT: 5432 
  REDIS_URL: redis://redis:6379/0 
  REDIS_BACKEND: redis://redis:6379/0
  

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
        ports:
          - 5432:5432

      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download wait-for-it.sh
      run: curl -o wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh

    - name: Make wait-for-it.sh executable
      run: chmod +x wait-for-it.sh

    - name: Wait for PostgreSQL
      run: ./wait-for-it.sh localhost:5432 --timeout=60 --strict -- echo "PostgreSQL is up"

    - name: Run migrations
      env:
        DATABASE_URL: postgres://postgres:admin@localhost:5432/test_db
      run: python ecommerce/manage.py migrate

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:admin@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
      run: |
        python3 ecommerce/manage.py test authenticationservice 
        python3 ecommerce/manage.py test adminservice 
        python3 ecommerce/manage.py test cartservice 
        python3 ecommerce/manage.py test notificationservice 
        python3 ecommerce/manage.py test paymentservice 
        python3 ecommerce/manage.py test userprofileservice  
        python3 ecommerce/manage.py test productservice 
        python3 ecommerce/manage.py test orderservice 